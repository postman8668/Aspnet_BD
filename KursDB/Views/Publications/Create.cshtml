@model KursDB.Models.Publication

@{
    ViewData["Title"] = "Create Publication";
}

<h1>Create Publication</h1>

<div class="row">
    <div class="col-md-6">
        <form asp-action="Create" class="needs-validation" novalidate>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Title" class="control-label">Title*</label>
                <input asp-for="Title" class="form-control" required maxlength="200" />
                <span asp-validation-for="Title" class="text-danger"></span>
                <div class="invalid-feedback">Please provide a title (max 200 characters).</div>
            </div>

            <div class="form-group">
                <label asp-for="PublicationTypeId" class="control-label">Publication Type*</label>
                <select asp-for="PublicationTypeId" class="form-control" required
                        asp-items="ViewBag.PublicationTypes">
                    <option value="">-- Select Publication Type --</option>
                </select>
                <span asp-validation-for="PublicationTypeId" class="text-danger"></span>
                <div class="invalid-feedback">Please select a publication type.</div>
            </div>

            <div class="form-group">
                <label asp-for="Publisher" class="control-label">Publisher</label>
                <input asp-for="Publisher" class="form-control" maxlength="100" />
                <span asp-validation-for="Publisher" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="PublicationYear" class="control-label">Publication Year</label>
                <input asp-for="PublicationYear" class="form-control"
                       min="1000" max="@(DateTime.Now.Year + 5)" />
                <span asp-validation-for="PublicationYear" class="text-danger"></span>
                <small class="form-text text-muted">Year between 1000 and @(DateTime.Now.Year + 5)</small>
            </div>

            <div class="form-group">
                <label asp-for="Isbn" class="control-label">ISBN</label>
                <input asp-for="Isbn" class="form-control" maxlength="20"
                       pattern="^(?:ISBN(?:-13)?:? )?(?=[0-9]{13}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9]$" />
                <span asp-validation-for="Isbn" class="text-danger"></span>
                <small class="form-text text-muted">Format: ISBN-10 or ISBN-13</small>
            </div>

            <div class="form-group">
                <label asp-for="Pages" class="control-label">Pages</label>
                <input asp-for="Pages" class="form-control" min="1" max="10000" />
                <span asp-validation-for="Pages" class="text-danger"></span>
                <small class="form-text text-muted">Number between 1 and 10,000</small>
            </div>

            <div class="form-group">
                <label asp-for="Description" class="control-label">Description</label>
                <textarea asp-for="Description" class="form-control" rows="4" maxlength="4000"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Create</button>
                <a asp-action="Index" class="btn btn-secondary ml-2">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Client-side validation
        (function() {
            'use strict';
            window.addEventListener('load', function() {
                var forms = document.getElementsByClassName('needs-validation');
                var validation = Array.prototype.filter.call(forms, function(form) {
                    form.addEventListener('submit', function(event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
}